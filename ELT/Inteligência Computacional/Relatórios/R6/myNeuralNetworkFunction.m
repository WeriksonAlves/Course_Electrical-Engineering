function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 07-Oct-2022 10:52:11.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx12 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;3.8;0.08;0;0.6;0.009;1;6;0.98711;2.72;0.22;8];
x1_step1.gain = [2;0.165289256198347;1.33333333333333;1.6260162601626;0.0306748466257669;4.84261501210654;0.00694444444444444;0.00460829493087558;38.5579332947754;1.55038759689923;1.42857142857143;0.289855072463768];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.3078610994768105069;1.4697690394078826159;-0.91603863420107334292;0.44382449217990205259;-0.58891587409241674678;-0.72940748957311274392;1.1226722378716464945;1.1173495593207929399;1.4841138964532751832;-2.9227264681589000261];
IW1_1 = [0.52880875553651029986 -0.93627910120424673313 -0.31071346294139035038 0.026646082174773898232 0.80682642292115724914 0.9858511236252889276 0.42626050591892727937 -0.87259041117896829487 -1.6555581636675846813 0.30409314910031276513 -0.71229513300114866148 0.3861907594218263462;0.1618757318594687411 0.64504403395323717252 0.49843829408386103319 -0.53490706425470913032 0.071674084913543711917 0.7932794116027618303 0.059557977011411813995 0.56960198356939351072 0.88173488263303212431 0.50233407136636964996 1.2663890463525611096 -0.47234389556637146335;0.33173164668325683113 -1.8599863295065044433 -0.23762714642895849115 -0.80852674382624412086 0.90930863354868918247 0.25992640337833311515 -0.048230488399193305327 -1.0556254877318154151 1.8974015371392374263 0.22928106290039959592 -0.31079937317435929467 0.082184824033584846781;-0.7436491519160401964 -0.86403670619707284573 -0.60241431728771721588 -0.089403478741033354238 0.15085404073604902209 -0.1543758221698009192 0.77711057239058112245 1.7285724047202559728 0.82012700856002673788 -0.35217963387502104755 0.67209738088348902618 -0.14788658259280043628;0.41304929768694875758 -0.048882340447990280108 0.038234754992304512133 0.11007960371219574491 -0.46346038913077619581 0.70755035095148832713 -0.74763378627122378806 -0.30990229247637834931 0.22724323491730763491 -0.38615685915679032192 -0.20461910859014587061 -0.19119332307566208606;-0.69940153602599974825 -0.55998790942496490253 -0.085079790569592084193 -0.76520598861901323318 0.33234205897009738706 0.9070486486671718307 -0.21559661999023660428 0.95322312127382335945 0.26393549332317362 -0.39131669981041594664 -0.22006442757840383173 -0.057954677625176843903;0.64585591425913313479 -0.44898180600505044335 -0.57595468824024687038 0.21375683688791349835 1.4356327072621459795 0.38233845529518756257 -1.9222339048694307984 -0.34184038550961770575 0.55600028900897013884 -0.68635453858727335508 1.4898020137817906683 -0.11373317865067278376;1.1668701056315207154 -0.20615533087230739073 -0.024911684786897148047 -1.1232734692613906002 -0.2193819494894740374 0.48874313145567455097 -0.58836235551101656593 -0.63661286784700132912 -0.39304703560296699871 0.8200991940213870901 0.18181051629886230137 -0.30215345111771690911;0.21083369038632113202 -0.10309259942797757703 0.86012193436460682161 -0.96593366460427965148 -0.2643741703698315737 -0.053581212631758051712 0.032175136304019705258 0.2776555178292513526 -0.303649831619248467 -1.0058014469590150775 -0.020500925597697117198 -0.14802120824392461795;0.16950229993141519014 -0.38255335503094145544 -2.1594172664820030505 -0.58267205152157108827 0.39522171253576671157 0.036030403838902880231 -0.77857461635648306242 0.18269288293114005484 1.9604781175682359784 -0.89461642779245664769 0.51606797217290534263 -0.61395196955137576467];

% Layer 2
b2 = 0.85031611841192222823;
LW2_1 = [0.46106230484007426629 -0.095173394038807618278 -0.47954378318720403129 -0.74113362690583428627 -1.1072842321245961461 0.5932025566880294587 0.50617554238221873497 -0.68596648369156443259 0.62840089502036777791 1.3796793198690029403];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.333333333333333;
y1_step1.xoffset = 3;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
